from "./poseidon_struct.zok" import DoubleHash
from "./poseidon2.zok" import poseidon2_batch2
from "./poseidon3.zok" import poseidon3
from "./poseidon5.zok" import poseidon5_batch2
from "./merkle.zok" import MerkleProof, verify_merkle, verify_merkle_batch
from "./schnorr.zok" import Point, DoublePoint, QuadPoint, PublicKey, Signature, verify_signature, point_add, point_mul, point_double_add_batch, point_mul_batch

const field NUM_REVEALS_F = 5

// Reveal Proof Entry
struct T {
    field i
    field[18] i_bits
    field[5] s // sig_r_x, sig_r_y, sig_s, l, r
    MerkleProof pi_s
    field[5] p // pk_p_x, pk_p_y, pk_q_x, pk_q_y, w
    MerkleProof pi_p
}

struct CompactCertProof {
    field sig_root
    field signed_weight
    T[NUM_REVEALS_F] t_list
}

// Verifier of a compact certificate function
def verifier(
    CompactCertProof compact_cert_proof,
    field proven_weight,
    // field num_reveals,
    field message,
    field att_root,
    field[NUM_REVEALS_F][253] e_bits_list,
    field[NUM_REVEALS_F][253] s_bits_list,
    field[NUM_REVEALS_F] coins
) -> field:
    field signed_weight = compact_cert_proof.signed_weight
    assert(signed_weight > proven_weight)
    // let num_reveals: usize = (k + q).div_ceil((signed_weight / proven_weight).ilog2() as usize);

    for field j in 0..NUM_REVEALS_F do
        // Reproduce coin
        // field[5] inputs = [(F)j, compact_cert_proof.sig_root, (F)proven_weight, message, att_root]
        // field coin_hash = poseidon(5, inputs)
        // field coin = coin_hash % (F)signed_weight
        field coin = coins[j]

        T t = compact_cert_proof.t_list[j]
        // Sig Opening
        // assert(verify_merkle(5, t.pi_s, compact_cert_proof.sig_root, t.i, t.i_bits, t.s, merkle_depth) == 1)
        // Att Opening
        // assert(verify_merkle(5, t.pi_p, att_root, t.i, t.i_bits, t.p, merkle_depth) == 1)
        assert(verify_merkle_batch(t.i, t.i_bits, t.pi_s, compact_cert_proof.sig_root, t.s, t.pi_p, att_root, t.p) == 1)
        // Validity of signature

        PublicKey pk = PublicKey {
            p: Point { x: t.p[0], y: t.p[1] },
            q: Point { x: t.p[2], y: t.p[3] }
        }
        Signature sig = Signature {
            r: Point{ x: t.s[0], y: t.s[1] },
            s: t.s[2]
        }
        assert(verify_signature(message, pk, sig, e_bits_list[j], s_bits_list[j]) == 1)
        // L < coin <= L + Weight
        assert(t.s[3] <= coin && coin < t.s[3] + t.p[4])
    endfor

    return 1

// Parse out the inputs in simple register - memory form
def main(
    field num_attestors,
    // For compact_cert_proof
    field sig_root,
    field signed_weight,
    // For others
    field proven_weight,
    field num_reveals,
    field message,
    // field merkle_depth,
    field att_root
) -> field:
    CompactCertProof compact_cert_proof = CompactCertProof {
        sig_root: sig_root,
        signed_weight: signed_weight,
        t_list: [T {
            i: 181151,
            i_bits: [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1],
            s: [5825981136301291903636607841308672092689610568878529308308905493841973549785, 5925388289133474226128812324504150490598732651725947796725306172468633388222, 325351793384470406252334781391102983651392507425947446014852054308883204032, 16407751825, 16407932976],
            pi_s: MerkleProof { path: [
                5905855233732171110247295755803857447420044220597906208044410534143648315437,
                6644184740137122461675102477259999185829509116353824210761466171095614872032,
                3262070530560652025029651723465865917701369661663512448462990032121534388893,
                4722165215686060104799407803679427940737750350064582240388995986217105577591,
                1841613645390529432623056520679145343734020976595756701790167951433659306621,
                6366127439894457383611052711937373231424805966683508491602329182963521569678,
                51989660282816755869906452522582024257770305384601444600804166260253838895,
                6520846008988223627437288717046321978103297607995190657488198936610531062476,
                5634775255010368258586487296124162427768302645222679254122560784923369286350,
                4888991302580191613220194122053839592108736287057233015800503843563393112039,
                5328346368650374151100316745648975525735509992187906394640419998508862546599,
                4469830322345116544090526771250116106690727934156819411607276871345728844054,
                4341831513385458793562158160697699660435777000798212469569446585461967741554,
                813071330938748898535493030128275557767025335650544826200855765007523799906,
                5297389783910228083525659780801760451207176894061922808563605832867773056575,
                5631880687822039546878494580311949981330574508979891917202126342615034558670,
                895168926693143822479196708379120398903225965919177933196727419116943446402,
                3197459874498406123425422674448535396920454782909799668019817307452567261568
            ] },
            p: [2023776050662786605020065854616777351003832247628992350849206310281785027488, 1079270832837170318396516616249394502719834190979906495690419930531357954746, 5911228099513187978829369455867780425048850611516448076595614292019080806548, 2995684674399896974024429490686307354570051923114883028193828769747795271795, 181151],
            pi_p: MerkleProof { path: [
                6350283985461145926640245957159925885364160962126964798914880014211920964712,
                237958759710531511123134298471442664096120528619028273761895469323952273260,
                1513744581438829819553890688864353550197040183218630418647747345482276427959,
                4431233537168321961799153449949124933016338776036297890001051042052794443052,
                4678475809883362043136205799826583780168597782421880192496321441279456805643,
                4676729476659931874452407291374904297863069346269373993530734704959691545560,
                994555197162973905842294811609309116529495388981293123208573109582314294758,
                961729854055549519095707937880795383440235133982354437626807485001042098376,
                954409665833238821803750582260362276164100135362964177584638762021208525019,
                1525345482787781321954544236550025307104851239464895328880970262410022029777,
                3837377062048180628657843745543804643211681548212305074921015386268766449645,
                2859565876647625103400888267107621396428387743136256996503050823213079855334,
                6181149493274797916868299752919790448514733731649336130497315469775931330829,
                6421745980595054849085629859443421085504436100177240313135161320062725315662,
                6709683518266811342890332572942913380888455525625710844158231071281523184199,
                6426196747348968018437278625122386250261590828935373752355822023499573369527,
                6748941260666033217693504206992704453802576329647712986804074856628734668977,
                3721663691812870705655545769124364883948756035625670249797209132959989099992
            ] }
        }]
    }
    field[1][253] e_bits_list = [[0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0]]
    field[1][253] s_bits_list = [[0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]]
    field[1] coins = [16407755793]

    return verifier(
        compact_cert_proof,
        proven_weight,
        // num_reveals,
        message,
        // merkle_depth,
        att_root,
        e_bits_list,
        s_bits_list,
        coins
    )