from "./poseidon_struct.zok" import DoubleHash
from "./poseidon2.zok" import poseidon2_batch2
from "./poseidon5.zok" import poseidon5_batch2

struct MerkleProof {
    // All internal nodes on the path
    field[18] path
}
// Perform two merkle tree verification together
// Both tree are of the same size, opening the same index
// Specifically built for compact certificate
def verify_merkle_batch(
    field index, 
    field[18] index_bits,  
    MerkleProof proof_0, 
    field root_0, 
    field[5] entry_0,
    MerkleProof proof_1, 
    field root_1, 
    field[5] entry_1
) -> u32:
    field index_assemb = 0
    // hash of leaf
    DoubleHash cur_nodes = poseidon5_batch2(entry_0[0], entry_0[1], entry_0[2], entry_0[3], entry_0[4], entry_1[0], entry_1[1], entry_1[2], entry_1[3], entry_1[4])
    // hash of internal nodes
    for u32 i in 0..18 do
        field next_bit = index_bits[i]
        assert(next_bit * (next_bit - 1) == 0)
        // index_assemb = index_assemb * 2 + next_bit
        // Depending on index, cur_node and proof[i] will be on two sides of the inputs
        next_bit = index_bits[18 - i - 1]
        next_bit = index_bits[i]
        field next_path = proof_0.path[i]
        field state1 = next_bit == 0 ? cur_nodes.hash0 : next_path
        field state2 = next_bit == 0 ? next_path : cur_nodes.hash0
        next_path = proof_1.path[i]
        field state3 = next_bit == 0 ? cur_nodes.hash1 : next_path
        field state4 = next_bit == 0 ? next_path : cur_nodes.hash1
        cur_nodes = poseidon2_batch2(state1, state2, state3, state4)
    endfor
    // assert(index_assemb == index)
    assert(cur_nodes.hash0 == root_0)
    assert(cur_nodes.hash1 == root_1)
    return 1